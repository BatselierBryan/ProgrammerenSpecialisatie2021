@*
	The MIT License(MIT)

	Copyright(c) 2021 Alberto Rodriguez Orozco & LiveCharts Contributors

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
*@

@using LiveChartsCore.Drawing
@using LiveChartsCore.Geo
@using LiveChartsCore.Kernel
@using LiveChartsCore.SkiaSharpView.Drawing
@using LiveChartsCore.SkiaSharpView.Painting
@using Microsoft.JSInterop
@using SkiaSharp
@using System.Collections.Specialized
@using System.ComponentModel

@inject IJSRuntime JS
@implements IGeoMapView<SkiaSharpDrawingContext>
@implements IDisposable

<!--
	the first wrapper <div/> is required so blazor is able to the isolate the css, do not remove!
	blazor bug?
-->

<div>
	<JsFlexibleContainer @ref="_jsFlexibleContainer">
		<Content>
			<div class="lvc-canvas-container" @ref="_canvasContainer">
				<MotionCanvas @ref="motionCanvas"></MotionCanvas>
			</div>
		</Content>
	</JsFlexibleContainer>
</div>

@code {
	private DomJsInterop? _dom;
	private JsFlexibleContainer _jsFlexibleContainer = null!;
	private ElementReference _canvasContainer;
	private MotionCanvas? motionCanvas;
	private double _canvasWidth;
	private double _canvasHeight;
	private CollectionDeepObserver<IMapElement>? _shapesObserver;
	private GeoMap<SkiaSharpDrawingContext>? _core;
	private IEnumerable<IMapElement> _shapes = Enumerable.Empty<IMapElement>();
	private CoreMap<SkiaSharpDrawingContext>? _activeMap;
	private MapProjection _mapProjection = MapProjection.Default;
	private LvcColor[] _heatMap = new[]
	{
		LvcColor.FromArgb(255, 179, 229, 252), // cold (min value)
		LvcColor.FromArgb(255, 2, 136, 209) // hot (max value)
	};
	private double[]? _colorStops = null;
	private IPaint<SkiaSharpDrawingContext>? _stroke = new SolidColorPaint(new SKColor(255, 255, 255, 255)) { IsStroke = true };
	private IPaint<SkiaSharpDrawingContext>? _fill = new SolidColorPaint(new SKColor(240, 240, 240, 255)) { IsFill = true };
	private object? _viewCommand = null;

	protected override void OnInitialized()
	{
		base.OnInitialized();

		if (!LiveCharts.IsConfigured) LiveCharts.Configure(LiveChartsSkiaSharp.DefaultPlatformBuilder);
		_activeMap = Maps.GetWorldMap<SkiaSharpDrawingContext>();
	}

	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		if (!firstRender) return;

		_core = new GeoMap<SkiaSharpDrawingContext>(this);
		_shapesObserver = new CollectionDeepObserver<IMapElement>(
			(object? sender, NotifyCollectionChangedEventArgs e) => _core?.Update(),
			(object? sender, PropertyChangedEventArgs e) => _core?.Update(),
			true);

		// ToDo: Pointer events.
		//var c = Controls[0].Controls[0];

		//c.MouseDown += OnMouseDown;
		//c.MouseMove += OnMouseMove;
		//c.MouseUp += OnMouseUp;
		//c.MouseLeave += OnMouseLeave;
		//c.MouseWheel += OnMouseWheel;

		//Resize += GeoMap_Resize;

		if (_dom is null) _dom = new DomJsInterop(JS);
		var canvasBounds = await _dom.GetBoundingClientRect(_canvasContainer);
		_canvasWidth = canvasBounds.Width;
		_canvasHeight = canvasBounds.Height;

		_core.Update();

		if (motionCanvas is null) throw new Exception("MotionCanvas not found");
		_jsFlexibleContainer.Resized += OnResized;
	}

	/// <inheritdoc cref="IGeoMapView{TDrawingContext}.Canvas"/>
	public MotionCanvas<SkiaSharpDrawingContext> Canvas => motionCanvas?.CanvasCore ?? throw new Exception("MotionCanvas not found.");

	/// <inheritdoc cref="IGeoMapView{TDrawingContext}.AutoUpdateEnabled" />
	[Parameter]
	public bool AutoUpdateEnabled { get; set; } = true;

	/// <inheritdoc cref="IGeoMapView{TDrawingContext}.DesignerMode" />
	bool IGeoMapView<SkiaSharpDrawingContext>.DesignerMode => false;

	/// <inheritdoc cref="IGeoMapView{TDrawingContext}.SyncContext" />
	[Parameter]
	public object SyncContext { get; set; } = new object();

	/// <inheritdoc cref="IGeoMapView{TDrawingContext}.ViewCommand" />
	[Parameter]
	public object? ViewCommand
	{
		get => _viewCommand;
		set
		{
			_viewCommand = value;
			if (value is not null) _core?.ViewTo(value);
		}
	}
	/// <inheritdoc cref="IGeoMapView{TDrawingContext}.ActiveMap"/>
	[Parameter]
	public CoreMap<SkiaSharpDrawingContext> ActiveMap
	{
		get => _activeMap ?? throw new Exception($"{nameof(ActiveMap)} is required.");
		set
		{
			_activeMap = value;
			OnPropertyChanged();
		}
	}

	/// <inheritdoc cref="IGeoMapView{TDrawingContext}.Width"/>
	float IGeoMapView<SkiaSharpDrawingContext>.Width => (float)_canvasWidth;

	/// <inheritdoc cref="IGeoMapView{TDrawingContext}.Height"/>
	float IGeoMapView<SkiaSharpDrawingContext>.Height => (float)_canvasHeight;

	/// <inheritdoc cref="IGeoMapView{TDrawingContext}.MapProjection"/>
	[Parameter]
	public MapProjection MapProjection { get => _mapProjection; set { _mapProjection = value; OnPropertyChanged(); } }

	/// <inheritdoc cref="IGeoMapView{TDrawingContext}.HeatMap"/>
	[Parameter]
	public LvcColor[] HeatMap { get => _heatMap; set { _heatMap = value; OnPropertyChanged(); } }

	/// <inheritdoc cref="IGeoMapView{TDrawingContext}.ColorStops"/>
	[Parameter]
	public double[]? ColorStops { get => _colorStops; set { _colorStops = value; OnPropertyChanged(); } }

	/// <inheritdoc cref="IGeoMapView{TDrawingContext}.Stroke"/>
	[Parameter]
	public IPaint<SkiaSharpDrawingContext>? Stroke
	{
		get => _stroke;
		set
		{
			if (value is not null) value.IsStroke = true;
			_stroke = value;
			OnPropertyChanged();
		}
	}

	/// <inheritdoc cref="IGeoMapView{TDrawingContext}.Fill"/>
	[Parameter]
	public IPaint<SkiaSharpDrawingContext>? Fill
	{
		get => _fill;
		set
		{
			if (value is not null) value.IsFill = true;
			_fill = value;
			OnPropertyChanged();
		}
	}

	/// <inheritdoc cref="IGeoMapView{TDrawingContext}.Shapes"/>
	[Parameter]
	public IEnumerable<IMapElement> Shapes
	{
		get => _shapes;
		set
		{
			_shapesObserver?.Dispose(_shapes);
			_shapesObserver?.Initialize(value);
			_shapes = value;
			OnPropertyChanged();
		}
	}

	void IGeoMapView<SkiaSharpDrawingContext>.InvokeOnUIThread(Action action)
	{
		InvokeAsync(action);//.Wait();
	}

	/// <summary>
	/// Called when a property changes.
	/// </summary>
	protected void OnPropertyChanged()
	{
		_core?.Update();
	}

	private async void OnResized(JsFlexibleContainer motionCanvas)
	{
		if (_dom is null) return;

		var canvasBounds = await _dom.GetBoundingClientRect(_canvasContainer);
		_canvasWidth = canvasBounds.Width;
		_canvasHeight = canvasBounds.Height;

		_core?.Update();
	}

	async void IDisposable.Dispose()
	{
		if (_dom is null) return;
		await ((IAsyncDisposable)_dom).DisposeAsync();
	}
}
