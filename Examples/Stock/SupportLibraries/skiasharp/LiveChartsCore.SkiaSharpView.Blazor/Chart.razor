@*
	The MIT License(MIT)

	Copyright(c) 2021 Alberto Rodriguez Orozco & LiveCharts Contributors

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
*@

@*Ideally this component should be abstract, is it posible in Blazor?*@

@using LiveChartsCore.Drawing
@using LiveChartsCore.Kernel
@using LiveChartsCore.Kernel.Events
@using LiveChartsCore.Kernel.Sketches
@using LiveChartsCore.Measure
@using LiveChartsCore.SkiaSharpView.Blazor.JsInterop.Models
@using LiveChartsCore.SkiaSharpView.Drawing
@using Microsoft.JSInterop

@inject IJSRuntime JS
@implements IChartView<SkiaSharpDrawingContext>
@implements IBlazorChart
@implements IDisposable

<!--
	the first wrapper <div/> is required so blazor is able to the isolate the css, do not remove!
	blazor bug?
-->

<div>
	<DefaultTooltip @ref="tooltip" Class="@TooltipClass" TooltipTemplate="@TooltipTemplate" />

	<JsFlexibleContainer @ref="_jsFlexibleContainer" Class="lvc-chart-container">
		<Content>
			<div class="lvc-canvas-container @ContainerClass" @ref="_canvasContainer">
				<MotionCanvas
					@ref="motionCanvas"
					OnPointerDownCallback="OnPointerDown"
					OnPointerMoveCallback="OnPointerMove"
					OnPointerUpCallback="OnPointerUp"
					OnPointerLeaveCallback="OnPointerLeave"
					OnWheelCallback="OnWheel">
				</MotionCanvas>
			</div>
			<div class="lvc-legend-container @LegendClass">
				<DefaultLegend @ref="legend" LegendTemplate="@LegendTemplate" />
			</div>
		</Content>
	</JsFlexibleContainer>
</div>

@code {
	private DomJsInterop? _dom;
	private JsFlexibleContainer _jsFlexibleContainer = null!;
	private ElementReference _canvasContainer;
	private IChartLegend<SkiaSharpDrawingContext> legend = null!;
	private IChartTooltip<SkiaSharpDrawingContext> tooltip = null!;

	protected Chart<SkiaSharpDrawingContext>? core;
	protected MotionCanvas? motionCanvas;

	private double _canvasWidth;
	private double _canvasHeight;

	private LegendPosition _legendPosition = LiveCharts.CurrentSettings.DefaultLegendPosition;
	private LegendOrientation _legendOrientation = LiveCharts.CurrentSettings.DefaultLegendOrientation;
	private Margin? _drawMargin = null;
	private TooltipPosition _tooltipPosition = LiveCharts.CurrentSettings.DefaultTooltipPosition;
	//private Font _tooltipFont = new(new FontFamily("Trebuchet MS"), 11, FontStyle.Regular);
	//private Color _tooltipBackColor = Color.FromArgb(255, 250, 250, 250);
	//private Font _legendFont = new(new FontFamily("Trebuchet MS"), 11, FontStyle.Regular);
	//private Color _legendBackColor = Color.FromArgb(255, 255, 255, 255);
	//private Color _legendTextColor = Color.FromArgb(255, 35, 35, 35);
	//private Color _tooltipTextColor;

	protected override void OnInitialized()
	{
		base.OnInitialized();

		if (!LiveCharts.IsConfigured) LiveCharts.Configure(LiveChartsSkiaSharp.DefaultPlatformBuilder);

		var stylesBuilder = LiveCharts.CurrentSettings.GetTheme<SkiaSharpDrawingContext>();
		var initializer = stylesBuilder.GetVisualsInitializer();
		if (stylesBuilder.CurrentColors is null || stylesBuilder.CurrentColors.Length == 0)
			throw new Exception("Default colors are not valid");
		initializer.ApplyStyleToChart(this);
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (!firstRender) return;

		InitializeCore();
		if (core is null || motionCanvas is null) throw new Exception("Core or MotionCanvas not found!");

		core.Measuring += OnCoreMeasuring;
		core.UpdateStarted += OnCoreUpdateStarted;
		core.UpdateFinished += OnCoreUpdateFinished;

		if (_dom is null) _dom = new DomJsInterop(JS);
		var canvasBounds = await _dom.GetBoundingClientRect(_canvasContainer);
		_canvasWidth = canvasBounds.Width;
		_canvasHeight = canvasBounds.Height;

		core?.Load();
		_jsFlexibleContainer.Resized += OnResized;
	}

	#region events

	/// <inheritdoc cref="IChartView{TDrawingContext}.Measuring" />
	public event ChartEventHandler<SkiaSharpDrawingContext>? Measuring;

	/// <inheritdoc cref="IChartView{TDrawingContext}.UpdateStarted" />
	public event ChartEventHandler<SkiaSharpDrawingContext>? UpdateStarted;

	/// <inheritdoc cref="IChartView{TDrawingContext}.UpdateFinished" />
	public event ChartEventHandler<SkiaSharpDrawingContext>? UpdateFinished;

	#endregion

	#region properties

	public ElementReference CanvasContainerElement => _canvasContainer;

	public string ContainerClass { get; set; } = string.Empty;

	public string LegendClass { get; set; } = string.Empty;

	public string TooltipClass { get; set; } = "closed";

	/// <inheritdoc cref="IChartView.DesignerMode" />
	bool IChartView.DesignerMode => false;

	/// <inheritdoc cref="IChartView.CoreChart" />
	public IChart CoreChart => core ?? throw new Exception("Core not set yet.");

	LvcColor IChartView.BackColor { get; set; }

	LvcSize IChartView.ControlSize => motionCanvas is null
		? new LvcSize()
		: new LvcSize { Width = (float)_canvasWidth, Height = (float)_canvasHeight };

	/// <inheritdoc cref="IChartView{TDrawingContext}.CoreCanvas" />
	public MotionCanvas<SkiaSharpDrawingContext> CoreCanvas => motionCanvas?.CanvasCore ?? throw new Exception("canvas not found!");

	/// <inheritdoc cref="IChartView.DrawMargin" />
	public Margin? DrawMargin { get => _drawMargin; set { _drawMargin = value; OnPropertyChanged(); } }

	/// <inheritdoc cref="IChartView.SyncContext" />
	[Parameter]
	public object SyncContext { get => CoreCanvas.Sync; set { CoreCanvas.Sync = value; OnPropertyChanged(); } }

	/// <inheritdoc cref="IChartView.AnimationsSpeed" />
	[Parameter]
	public TimeSpan AnimationsSpeed { get; set; } = LiveCharts.CurrentSettings.DefaultAnimationsSpeed;

	/// <inheritdoc cref="IChartView.AnimationsSpeed" />
	[Parameter]
	public Func<float, float>? EasingFunction { get; set; } = LiveCharts.CurrentSettings.DefaultEasingFunction;

	/// <inheritdoc cref="IChartView.LegendPosition" />
	[Parameter]
	public LegendPosition LegendPosition { get => _legendPosition; set { _legendPosition = value; OnPropertyChanged(); } }

	/// <inheritdoc cref="IChartView.LegendOrientation" />
	[Parameter]
	public LegendOrientation LegendOrientation { get => _legendOrientation; set { _legendOrientation = value; OnPropertyChanged(); } }

	/// <inheritdoc cref="IChartView{TDrawingContext}.Legend" />
	//[Parameter]
	public IChartLegend<SkiaSharpDrawingContext>? Legend => legend;

	/// <inheritdoc cref="IChartView.LegendPosition" />
	[Parameter]
	public TooltipPosition TooltipPosition { get => _tooltipPosition; set { _tooltipPosition = value; OnPropertyChanged(); } }

	/// <inheritdoc cref="IChartView{TDrawingContext}.Tooltip" />
	public IChartTooltip<SkiaSharpDrawingContext>? Tooltip => tooltip;

	/// <inheritdoc cref="IChartView{TDrawingContext}.PointStates" />
	[Parameter]
	public PointStatesDictionary<SkiaSharpDrawingContext> PointStates { get; set; } = new();

	/// <inheritdoc cref="IChartView{TDrawingContext}.AutoUpdateEnabled" />
	[Parameter]
	public bool AutoUpdateEnabled { get; set; } = true;

	/// <inheritdoc cref="IChartView.UpdaterThrottler" />
	[Parameter]
	public TimeSpan UpdaterThrottler
	{
		get => core?.UpdaterThrottler ?? throw new Exception("core not set yet.");
		set
		{
			if (core is null) throw new Exception("core not set yet.");
			core.UpdaterThrottler = value;
		}
	}

	/// <summary>
	/// Gets or sets the legend template.
	/// </summary>
	[Parameter]
	public RenderFragment<ISeries[]>? LegendTemplate { get; set; }

	/// <summary>
	/// Gets or sets the tooltip legend.
	/// </summary>
	[Parameter]
	public RenderFragment<TooltipPoint[]>? TooltipTemplate { get; set; }

	#endregion

	/// <inheritdoc cref="IChartView{TDrawingContext}.ShowTooltip(IEnumerable{TooltipPoint})"/>
	public void ShowTooltip(IEnumerable<TooltipPoint> points)
	{
		if (tooltip is null || core is null) return;

		tooltip.Show(points, core);
	}

	/// <inheritdoc cref="IChartView{TDrawingContext}.HideTooltip"/>
	public void HideTooltip()
	{
		if (tooltip is null || core is null) return;

		foreach (var state in PointStates.GetStates())
		{
			if (!state.IsHoverState) continue;
			if (state.Fill is not null) state.Fill.ClearGeometriesFromPaintTask(core.Canvas);
			if (state.Stroke is not null) state.Stroke.ClearGeometriesFromPaintTask(core.Canvas);
		}

		core.ClearTooltipData();
		tooltip.Hide();
	}

	/// <inheritdoc cref="IChartView.SetTooltipStyle(LvcColor, LvcColor)"/>
	public void SetTooltipStyle(LvcColor background, LvcColor textColor)
	{
		//TooltipBackColor = Color.FromArgb(background.A, background.R, background.G, background.B);
		//TooltipTextColor = Color.FromArgb(textColor.A, textColor.R, textColor.G, textColor.B);
	}

	void IChartView.InvokeOnUIThread(Action action)
	{
		InvokeAsync(action);
	}

	/// <inheritdoc cref="IChartView.SyncAction(Action)"/>
	public void SyncAction(Action action)
	{
		lock (CoreCanvas.Sync)
		{
			action();
		}
	}

	protected virtual void InitializeCore()
	{
		throw new NotImplementedException();
	}

	protected void OnPropertyChanged()
	{
		if (core is null || ((IChartView)this).DesignerMode) return;
		core.Update();
	}

	private void OnCoreUpdateFinished(IChartView<SkiaSharpDrawingContext> chart)
	{
		UpdateFinished?.Invoke(this);
	}

	private void OnCoreUpdateStarted(IChartView<SkiaSharpDrawingContext> chart)
	{
		UpdateStarted?.Invoke(this);
	}

	private void OnCoreMeasuring(IChartView<SkiaSharpDrawingContext> chart)
	{
		Measuring?.Invoke(this);
	}

	protected virtual void OnPointerDown(PointerEventArgs e)
	{
		core?.InvokePointerDown(new LvcPoint((float)e.OffsetX, (float)e.OffsetY));
	}

	protected virtual void OnPointerMove(PointerEventArgs e)
	{
		core?.InvokePointerMove(new LvcPoint((float)e.OffsetX, (float)e.OffsetY));
	}

	protected virtual void OnPointerUp(PointerEventArgs e)
	{
		core?.InvokePointerUp(new LvcPoint((float)e.OffsetX, (float)e.OffsetY));
	}

	protected virtual void OnWheel(WheelEventArgs e) { }

	protected virtual void OnPointerLeave(PointerEventArgs e)
	{
		HideTooltip();
		core?.InvokePointerLeft();
	}

	private async void OnResized(JsFlexibleContainer container)
	{
		if (_dom is null) return;

		var canvasBounds = await _dom.GetBoundingClientRect(_canvasContainer);
		_canvasWidth = canvasBounds.Width;
		_canvasHeight = canvasBounds.Height;

		core?.Update();
	}

	async void IDisposable.Dispose()
	{
		if (_dom is null) return;
		await ((IAsyncDisposable)_dom).DisposeAsync();
	}
}
